colnames(cor_original) <- c("variable1", "variable2", "original_correlation_coefficient")
col_original <- cor_original %>%
filter(variable1 != variable2) %>% # Exclude diagonal values
arrange(desc(abs(original_correlation_coefficient))) %>% # Sort by correlation in descending order
head(5) %>%
distinct(original_correlation_coefficient, .keep_all = TRUE) %>%
unite("pair", variable1, variable2, sep = " - ") %>%
mutate(pair = recode(pair,
"density - residual.sugar" = "Density (g/ml) - Residual Sugar (g/L)",
"alcohol - density" = "Alcohol (% vol) - Density (g/ml)",
"total.sulfur.dioxide - free.sulfur.dioxide" = "Total Sulfur Dioxde (mg/L) - Free Sulfur Dioxide (mg/L)")) %>%
as_tibble()
### Data preparation
mean_cor_df <- do.call(rbind, lapply(seq_along(mean_imp_cor), function(i) flatten_matrix(mean_imp_cor[[i]]))) %>%
mutate(method = "Mean")
median_cor_df <- do.call(rbind, lapply(seq_along(median_imp_cor), function(i) flatten_matrix(median_imp_cor[[i]]))) %>%
mutate(method = "Median")
zero_cor_df <- do.call(rbind, lapply(seq_along(zero_imp_cor), function(i) flatten_matrix(zero_imp_cor[[i]]))) %>%
mutate(method = "Zero")
reg_cor_df <- do.call(rbind, lapply(seq_along(reg_imp_cor), function(i) flatten_matrix(reg_imp_cor[[i]]))) %>%
mutate(method = "Regression")
sreg_cor_df <- do.call(rbind, lapply(seq_along(sreg_imp_cor), function(i) flatten_matrix(sreg_imp_cor[[i]]))) %>%
mutate(method = "Stochastic reg.")
knn_cor_df <- do.call(rbind, lapply(seq_along(knn_imp_cor), function(i) flatten_matrix(knn_imp_cor[[i]]))) %>%
mutate(method = "kNN")
mice_cor_df <- do.call(rbind, lapply(seq_along(mice_imp_cor), function(i) flatten_matrix(mice_imp_cor[[i]]))) %>%
mutate(method = "MICE")
pmm_cor_df <- do.call(rbind, lapply(seq_along(pmm_imp_cor), function(i) flatten_matrix(pmm_imp_cor[[i]]))) %>%
mutate(method = "PMM")
### Combine all correlation coefficients across all methods
joint_cor_df <- rbind(mean_cor_df, median_cor_df, zero_cor_df, reg_cor_df, sreg_cor_df, knn_cor_df, mice_cor_df, pmm_cor_df)
joint_cor_df <- cbind(joint_cor_df, cor_original[,3])
colnames(joint_cor_df) <- c("variable1", "variable2", "correlation_coefficient", "method", "original_correlation_coefficient")
### Filter out the correlation coefficients of the three pairs
joint_cor <- joint_cor_df %>%
filter((variable1 == "alcohol" & variable2 == "density") |
(variable1 == "density" & variable2 == "residual.sugar") |
(variable1 == "total.sulfur.dioxide" & variable2 == "free.sulfur.dioxide")) %>%
unite("variable", variable1, variable2, sep = " - ") %>%
mutate(variable = recode(variable,
"density - residual.sugar" = "Density (g/ml) - Residual Sugar (g/L)",
"alcohol - density" = "Alcohol (% vol) - Density (g/ml)",
"total.sulfur.dioxide - free.sulfur.dioxide" = "Total Sulfur Dioxde (mg/L) - Free Sulfur Dioxide (mg/L)")) %>%
as_tibble()
joint_cor$method <- factor(joint_cor$method, levels = c("Mean", "Median", "Zero", "Regression", "Stochastic reg.", "kNN", "MICE", "PMM"))
joint_cor_sum <- joint_cor %>%
group_by(variable, method) %>%
summarise(
min = min(correlation_coefficient),
max = max(correlation_coefficient),
average = mean(correlation_coefficient)) %>%
as_tibble() %>%
print(n = 8 * 3)
### Plots
cor1_plot <- joint_cor %>%
filter(variable == "Alcohol (% vol) - Density (g/ml)") %>%
ggplot(aes(x = correlation_coefficient, y = method, group = variable)) +
geom_point(show.legend = FALSE, aes(color = method)) +
geom_line(show.legend = FALSE, aes(x=original_correlation_coefficient, color = "Original correlation coefficient")) +
scale_color_manual(" ", values = extended_palette2) +
labs(caption = "Original correlation coefficient is displayed as the vertical line") +
theme_minimal() +
theme(plot.caption = element_text(hjust = 0),
panel.spacing = unit(1, "lines"),
text = element_text(size = 14)) +
labs(title = "Alcohol (% vol) - Density (g/ml)",
x = "Correlation coefficients",
y = "Method")
cor1_plot
cor1_plot
cor2_plot <- joint_cor %>%
filter(variable == "Density (g/ml) - Residual Sugar (g/L)") %>%
ggplot(aes(x = correlation_coefficient, y = method, group = variable)) +
geom_point(show.legend = FALSE, aes(color = method)) +
geom_line(show.legend = FALSE, aes(x=original_correlation_coefficient, color = "Original correlation coefficient")) +
scale_color_manual(" ", values = extended_palette2) +
labs(caption = "Original correlation coefficient is displayed as the vertical line") +
theme_minimal() +
theme(plot.caption = element_text(hjust = 0),
panel.spacing = unit(1, "lines"),
text = element_text(size = 14)) +
labs(title = "Density (g/ml) - Residual Sugar (g/L)",
x = "Correlation coefficients",
y = "Method")
cor2_plot
cor3_plot <- joint_cor %>%
filter(variable == "Total Sulfur Dioxde (mg/L) - Free Sulfur Dioxide (mg/L)") %>%
ggplot(aes(x = correlation_coefficient, y = method, group = variable)) +
geom_point(show.legend = FALSE, aes(color = method)) +
geom_line(show.legend = FALSE, aes(x=original_correlation_coefficient, color = "Original correlation coefficient")) +
scale_color_manual(" ", values = extended_palette2) +
labs(caption = "Original correlation coefficient is displayed as the vertical line") +
theme_minimal() +
theme(plot.caption = element_text(hjust = 0),
panel.spacing = unit(1, "lines"),
text = element_text(size = 14)) +
labs(title = "Total Sulfur Dioxde (mg/L) - Free Sulfur Dioxide (mg/L)",
x = "Correlation coefficients",
y = "Method")
cor3_plot
cor3_plot
cor3_plot <- joint_cor %>%
filter(variable == "Total Sulfur Dioxde (mg/L) - Free Sulfur Dioxide (mg/L)") %>%
ggplot(aes(x = correlation_coefficient, y = method, group = variable)) +
geom_point(show.legend = FALSE, aes(color = method)) +
geom_line(show.legend = FALSE, aes(x=original_correlation_coefficient, color = "Original correlation coefficient")) +
scale_color_manual(" ", values = extended_palette2) +
labs(caption = "Original correlation coefficient is displayed as the vertical line") +
theme_minimal() +
theme(plot.caption = element_text(hjust = 0),
panel.spacing = unit(1, "lines"),
text = element_text(size = 14)) +
labs(title = "Total Sulfur Dioxde (mg/L) - Free Sulfur Dioxide (mg/L)",
x = "Correlation coefficients",
y = "Method")
cor2_plot
cor1_plot
### Calculate coverage
mean_cr <- coverage(mean_imp$imputed_datasets, as.data.frame(data_yj))
mean_imp <- readRDS("mean_imp.rds")
### Calculate coverage
mean_cr <- coverage(mean_imp$imputed_datasets, as.data.frame(data_yj))
## Function to caluclate mean regression coefficients and coverage rates
coverage <- function(datasets_list, original_data) {
original_data <- data
# Fit the original model to get the number of coefficients
fit_original <- polr(factor(quality, ordered = TRUE) ~ ., data = original_data, method = "logistic", Hess = TRUE)
original_coefs <- c(coef(fit_original), fit_original$zeta)
num_coefs <- length(original_coefs)
# For storing coverage rate data
coverage_counts <- matrix(0, nrow = length(datasets_list), ncol = num_coefs)
coefficients_list <- matrix(NA, nrow = length(datasets_list), ncol = num_coefs+1)
for (i in 1:length(datasets_list)) {
imputed_data <- datasets_list[[i]]
## Fit linear model on imputed data
fit_imputed <- polr(factor(quality, ordered = TRUE) ~ ., data = imputed_data, method = "logistic", Hess = TRUE)
## Extract coefficients and confidence intervals
imputed_coefs <- c(coef(fit_imputed), fit_imputed$zeta)
num_imputed_coefs <- length(imputed_coefs)
coefficients_list[i, 1:num_imputed_coefs] <- imputed_coefs
## Get the standard errors from the imputed model
imputed_se <- summary(fit_imputed)$coefficients[, "Std. Error"]
## Calculate Wald confidence intervals
z_critical <- qnorm(0.975)
lower_ci <- imputed_coefs - z_critical * imputed_se
upper_ci <- imputed_coefs + z_critical * imputed_se
## Count if original coefficient is within the confidence interval of imputed model
for (k in 1:length(original_coefs)) {
if (original_coefs[k] >= lower_ci[k] && original_coefs[k] <= upper_ci[k]) {
coverage_counts[i, k] <- 1
} else {
coverage_counts[i, k] <- 0
}
}
}
coverage_rates <- colMeans(coverage_counts)
mean_coefficients <- colMeans(coefficients_list, na.rm = TRUE)
## Combine coverage rates with coefficient names
coefficient_names <- c(names(coef(fit_original)), paste0("Intercept", seq_along(fit_original$zeta)))
overage_rates_named <- tibble(variable = coefficient_names,
original_coefficients = original_coefs,
mean_coefficients = mean_coefficients[1:num_coefs],
coverage_rate = coverage_rates)
return(list(coverage_rates = coverage_rates_named,
coefficients = coefficients_list))
}
### Calculate coverage
mean_cr <- coverage(mean_imp$imputed_datasets, as.data.frame(data_yj))
reg_cr_rev <- coverage(reg_imp_rev$reverse_imputed_datasets, data)
## Function to caluclate mean regression coefficients and coverage rates
coverage <- function(datasets_list, original_data) {
original_data <- data
# Fit the original model to get the number of coefficients
fit_original <- polr(factor(quality, ordered = TRUE) ~ ., data = original_data, method = "logistic", Hess = TRUE)
original_coefs <- c(coef(fit_original), fit_original$zeta)
num_coefs <- length(original_coefs)
# For storing coverage rate data
coverage_counts <- matrix(0, nrow = length(datasets_list), ncol = num_coefs)
coefficients_list <- matrix(NA, nrow = length(datasets_list), ncol = num_coefs+1)
for (i in 1:length(datasets_list)) {
imputed_data <- datasets_list[[i]]
## Fit linear model on imputed data
fit_imputed <- polr(factor(quality, ordered = TRUE) ~ ., data = imputed_data, method = "logistic", Hess = TRUE)
## Extract coefficients and confidence intervals
imputed_coefs <- c(coef(fit_imputed), fit_imputed$zeta)
num_imputed_coefs <- length(imputed_coefs)
coefficients_list[i, 1:num_imputed_coefs] <- imputed_coefs
## Get the standard errors from the imputed model
imputed_se <- summary(fit_imputed)$coefficients[, "Std. Error"]
## Calculate Wald confidence intervals
z_critical <- qnorm(0.975)
lower_ci <- imputed_coefs - z_critical * imputed_se
upper_ci <- imputed_coefs + z_critical * imputed_se
## Count if original coefficient is within the confidence interval of imputed model
for (k in 1:length(original_coefs)) {
if (original_coefs[k] >= lower_ci[k] && original_coefs[k] <= upper_ci[k]) {
coverage_counts[i, k] <- 1
} else {
coverage_counts[i, k] <- 0
}
}
}
coverage_rates <- colMeans(coverage_counts)
mean_coefficients <- colMeans(coefficients_list, na.rm = TRUE)
## Combine coverage rates with coefficient names
coefficient_names <- c(names(coef(fit_original)), paste0("Intercept", seq_along(fit_original$zeta)))
coverage_rates_named <- tibble(variable = coefficient_names,
original_coefficients = original_coefs,
mean_coefficients = mean_coefficients[1:num_coefs],
coverage_rate = coverage_rates)
return(list(coverage_rates = coverage_rates_named,
coefficients = coefficients_list))
}
### Calculate coverage
mean_cr <- coverage(mean_imp$imputed_datasets, as.data.frame(data_yj))
preserv_mean
joint_mean
summary_mean <- joint_mean %>%
dplyr::group_by(variable) %>%
dplyr::summarize(
max_method = method[which.max(value)],
max = max(value, na.rm = TRUE),
min_method = method[which.min(value)],
min = min(value, na.rm = TRUE))
summary_mean
joint_mean
### Means----
### Extract average imputation means
preserv_mean <- tibble(variable = variables,
variable_unit = variables_unit
Original = psych::describe(data, type = 2)$mean,
### Means----
### Extract average imputation means
preserv_mean <- tibble(variable = variables,
variable_unit = variables_unit,
Original = psych::describe(data, type = 2)$mean,
Mean = mean_imp_mean,
Median = median_imp_mean,
Zero = zero_imp_mean,
Regression = reg_imp_mean,
Stochastic_regression = sreg_imp_mean,
kNN = knn_imp_mean,
MICE = mice_imp_mean,
PMM = pmm_imp_mean)
preserv_mean
psych::describe(data, type = 2)
joint_mean <- rbind(mean_mean, median_mean,reg_mean, sreg_mean, knn_mean, mice_mean, pmm_mean)
joint_mean <- left_join(joint_mean, original_mean)
joint_mean <- joint_mean %>%
mutate(variable = recode(variable,
"fixed.acidity" = "Fixed Acidity (g/L)",
"volatile.acidity" = "Volatile Acidity (g/L)",
"citric.acid" = "Citric Acid (g/L)",
"residual.sugar" = "Residual Sugar (g/L)",
"chlorides" = "Chlorides (g/L)",
"free.sulfur.dioxide" = "Free Sulfur Dioxide (mg/L)",
"total.sulfur.dioxide" = "Total Sulfur Dioxide (mg/L)",
"density" = "Density (g/ml)",
"pH" = "pH",
"sulphates" = "Sulphates (g/L)",
"alcohol" = "Alcohol (% vol)",
"quality" = "Quality"))
joint_mean$method <- factor(joint_mean$method, levels = c("Mean", "Median", "Regression", "Stochastic reg.", "kNN", "MICE", "PMM"))
### Mean plot
mean_plot <- ggplot(joint_mean, aes(x=value, y = method, group = variable)) +
geom_point(show.legend = FALSE, aes(color = method)) +
geom_line(show.legend = FALSE, aes(x=original_mean, color = "Original mean")) +
facet_wrap(~variable, scale = "free_x") +
scale_color_manual(" ", values = extended_palette2) +
labs(caption = "Original means are displayed as the vertical line") +
theme_minimal() +
theme(plot.caption = element_text(hjust = 0),
panel.spacing = unit(1, "lines"),
text = element_text(size = 14)) +
labs(x = "Means",
y = "Method")
mean_plot
mean_plot
summary_mean
summary_mean <- joint_mean %>%
dplyr::group_by(variable) %>%
dplyr::summarize(
max_method = method[which.max(value)],
max = max(value, na.rm = TRUE),
min_method = method[which.min(value)],
min = min(value, na.rm = TRUE))
summary_mean
psych::describe(data, type = 2)
psych::describe(data, type = 2)
joint_sd <- rbind(mean_sd, median_sd, reg_sd, sreg_sd, knn_sd, mice_sd, pmm_sd)
joint_sd <- left_join(joint_sd, original_sd)
joint_sd <- joint_sd %>%
mutate(variable = recode(variable,
"fixed.acidity" = "Fixed Acidity (g/L)",
"volatile.acidity" = "Volatile Acidity (g/L)",
"citric.acid" = "Citric Acid (g/L)",
"residual.sugar" = "Residual Sugar (g/L)",
"chlorides" = "Chlorides (g/L)",
"free.sulfur.dioxide" = "Free Sulfur Dioxide (mg/L)",
"total.sulfur.dioxide" = "Total Sulfur Dioxide (mg/L)",
"density" = "Density (g/ml)",
"pH" = "pH",
"sulphates" = "Sulphates (g/L)",
"alcohol" = "Alcohol (% vol)",
"quality" = "Quality"))
joint_sd$method <- factor(joint_sd$method, levels = c("Mean", "Median", "Zero", "Regression", "Stochastic reg.", "kNN", "MICE", "PMM"))
### SD plot
sd_plot <- ggplot(joint_sd, aes(x=value, y = method, group = variable)) +
geom_point(show.legend = FALSE, aes(color = method)) +
geom_line(show.legend = FALSE, aes(x=original_sd, color = "Original standard deviation")) +
facet_wrap(~variable, scale = "free_x") +
scale_color_manual(" ", values = extended_palette2) +
labs(caption = "Original standard deviations are displayed as the vertical line") +
theme_minimal() +
theme(plot.caption = element_text(hjust = 0),
panel.spacing = unit(1, "lines"),
text = element_text(size = 14)) +
labs(x = "Standard Deviations",
y = "Method")
sd_plot
summary_mean
joint_mean
summary_mean
max <- max(joint_mean$value)
max
max <- joint_mean %>%
filter(method == "MICE") %>%
max()
max <- joint_mean %>%
filter(method == "MICE") %>%
max(value)
max <- joint_mean %>%
filter(method == "MICE") %>%
summarise(max(value))
max
max <- joint_mean %>%
filter(method == "MICE" & variable == "Residual Sugar (g/L") %>%
summarise(max(value))
max <- joint_mean %>%
filter(method == "MICE" && variable == "Residual Sugar (g/L") %>%
summarise(max(value))
max <- joint_mean %>%
filter(method == "MICE" & variable == "Residual Sugar (g/L") %>%
summarise(max(value))
max <- joint_mean %>%
filter(method == "MICE" & variable == "Residual Sugar (g/L")
max
joint_mean
max <- joint_mean %>%
filter(method == "MICE" & variable == "Residual Sugar (g/L)")
max
max <- joint_mean %>%
filter(method == "MICE" & variable == "Residual Sugar (g/L)") %>%
max(value)
max <- joint_mean %>%
filter(method == "MICE" & variable == "Residual Sugar (g/L)") %>%
summarise(max(value))
max
gplot(joint_mean, aes(x=value, y = method, group = variable)) +
geom_point(show.legend = FALSE, aes(color = method)) +
geom_line(show.legend = FALSE, aes(x=original_mean, color = "Original mean")) +
facet_wrap(~variable, scale = "free_x") +
scale_color_manual(" ", values = extended_palette2) +
labs(caption = "Original means are displayed as the vertical line") +
theme_minimal() +
theme(plot.caption = element_text(hjust = 0),
panel.spacing = unit(1, "lines"),
text = element_text(size = 14)) +
labs(x = "Means",
y = "Method")
ggplot(joint_mean, aes(x=value, y = method, group = variable)) +
geom_point(show.legend = FALSE, aes(color = method)) +
geom_line(show.legend = FALSE, aes(x=original_mean, color = "Original mean")) +
facet_wrap(~variable, scale = "free_x") +
scale_color_manual(" ", values = extended_palette2) +
labs(caption = "Original means are displayed as the vertical line") +
theme_minimal() +
theme(plot.caption = element_text(hjust = 0),
panel.spacing = unit(1, "lines"),
text = element_text(size = 14)) +
labs(x = "Means",
y = "Method")
mean_plot2
ggplot(aes(x=value, y = method, group = variable)) +
geom_point(show.legend = FALSE, aes(color = method)) +
geom_line(show.legend = FALSE, aes(x=original_mean, color = "Original mean")) +
facet_wrap(~variable, scale = "free_x") +
scale_color_manual(" ", values = extended_palette2) +
labs(caption = "Original means are displayed as the vertical line") +
theme_minimal() +
theme(plot.caption = element_text(hjust = 0),
panel.spacing = unit(1, "lines"),
text = element_text(size = 14)) +
labs(x = "Means",
y = "Method")
joint_mean2 <- joint_mean[!(joint_mean$variable == "Residual Sugar (g/L") & joint_mean&method == "MICE" & joint_mean$value == max)]
joint_mean2 <- joint_mean[!(joint_mean$variable == "Residual Sugar (g/L)" & joint_mean&method == "MICE" & joint_mean$value == max)]
method <- "MICE"
variable <- "Residual Sugar (g/L)"
joint_mean2 <- joint_mean[!(joint_mean$variable == variable & joint_mean&method == method & joint_mean$value == max)]
joint_mean
psych::describe(data, type = 2)
mean_plot2 <- joint_mean %>%
filter(variable == "Residual Sugar (g/L)" & method == "MICE" & value == max) %>%
ggplot(aes(x=value, y = method, group = variable)) +
geom_point(show.legend = FALSE, aes(color = method)) +
geom_line(show.legend = FALSE, aes(x=original_mean, color = "Original mean")) +
facet_wrap(~variable, scale = "free_x") +
scale_color_manual(" ", values = extended_palette2) +
labs(caption = "Original means are displayed as the vertical line") +
theme_minimal() +
theme(plot.caption = element_text(hjust = 0),
panel.spacing = unit(1, "lines"),
text = element_text(size = 14)) +
labs(x = "Means",
y = "Method")
variable <- "Residual Sugar (g/L"
variable <- "Residual Sugar (g/L)"
max_value <- max(joint_mean$value[joint_mean$method == target_method & joint_mean$variable == variable])
max_value <- max(joint_mean$value[joint_mean$method == method & joint_mean$variable == variable])
max_value
joint_mean2 <- joint_mean[!(joint_mean$method == method & joint_mean$variable == variable & value == max_value)]
joint_mean2 <- joint_mean[!(joint_mean$method == method & joint_mean$variable == variable & joint_mean&value == max_value)]
joint_mean2 <- joint_mean[!(joint_mean$method == method & joint_mean$variable == variable & joint_mean$value == max_value)]
joint_mean2 <- joint_mean[!(joint_mean$method == method & joint_mean$variable == variable & joint_mean$value == max_value),]
joint_mean2
mean_plot2 <- ggplot(joint_mean2, aes(x=value, y = method, group = variable)) +
geom_point(show.legend = FALSE, aes(color = method)) +
geom_line(show.legend = FALSE, aes(x=original_mean, color = "Original mean")) +
facet_wrap(~variable, scale = "free_x") +
scale_color_manual(" ", values = extended_palette2) +
labs(caption = "Original means are displayed as the vertical line") +
theme_minimal() +
theme(plot.caption = element_text(hjust = 0),
panel.spacing = unit(1, "lines"),
text = element_text(size = 14)) +
labs(x = "Means",
y = "Method")
mean_plot2
method <- "MICE"
variable <- "Residual Sugar (g/L)"
max_value <- max(joint_sd$value[joint_sd$method == method & joint_sd$variable == variable])
joint_sd2 <- joint_sd[!(joint_sd$method == method & joint_sd$variable == variable & joint_sd$value == max_value),]
method_sd <- "MICE"
variable_sd <- "Residual Sugar (g/L)"
max_value_sd <- max(joint_sd$value[joint_sd$method == method & joint_sd$variable == variable])
joint_sd2 <- joint_sd[!(joint_sd$method == method & joint_sd$variable == variable & joint_sd$value == max_value),]
method <- "MICE"
variable <- "Residual Sugar (g/L)"
max_value <- max(joint_mean$value[joint_mean$method == method & joint_mean$variable == variable])
joint_mean2 <- joint_mean[!(joint_mean$method == method & joint_mean$variable == variable & joint_mean$value == max_value),]
sd_plot2 <- ggplot(joint_sd2, aes(x=value, y = method, group = variable)) +
geom_point(show.legend = FALSE, aes(color = method)) +
geom_line(show.legend = FALSE, aes(x=original_sd, color = "Original standard deviation")) +
facet_wrap(~variable, scale = "free_x") +
scale_color_manual(" ", values = extended_palette2) +
labs(caption = "Original standard deviations are displayed as the vertical line") +
theme_minimal() +
theme(plot.caption = element_text(hjust = 0),
panel.spacing = unit(1, "lines"),
text = element_text(size = 14)) +
labs(x = "Standard Deviations",
y = "Method")
sd_plot2
joint_skew <- rbind(mean_skew, median_skew, reg_skew, sreg_skew, knn_skew, mice_skew, pmm_skew)
joint_skew <- left_join(joint_skew, original_skewness)
joint_skew <- joint_skew %>%
mutate(variable = recode(variable,
"fixed.acidity" = "Fixed Acidity (g/L)",
"volatile.acidity" = "Volatile Acidity (g/L)",
"citric.acid" = "Citric Acid (g/L)",
"residual.sugar" = "Residual Sugar (g/L)",
"chlorides" = "Chlorides (g/L)",
"free.sulfur.dioxide" = "Free Sulfur Dioxide (mg/L)",
"total.sulfur.dioxide" = "Total Sulfur Dioxide (mg/L)",
"density" = "Density (g/ml)",
"pH" = "pH",
"sulphates" = "Sulphates (g/L)",
"alcohol" = "Alcohol (% vol)",
"quality" = "Quality"))
joint_skew$method <- factor(joint_skew$method, levels = c("Mean", "Median", "Zero", "Regression", "Stochastic reg.", "kNN", "MICE", "PMM"))
joint_skew$method <- factor(joint_skew$method, levels = c("Mean", "Median", "Regression", "Stochastic reg.", "kNN", "MICE", "PMM"))
### SD plot
skew_plot <- ggplot(joint_skew, aes(x=value, y = method, group = variable)) +
geom_point(show.legend = FALSE, aes(color = method)) +
geom_line(show.legend = FALSE, aes(x=original_skewness, color = "Original skewness")) +
facet_wrap(~variable, scale = "free_x") +
scale_color_manual(" ", values = extended_palette2) +
labs(caption = "Original skewness is displayed as the vertical line") +
theme_minimal() +
theme(plot.caption = element_text(hjust = 0),
panel.spacing = unit(1, "lines"),
text = element_text(size = 14)) +
labs(x = "Skewness",
y = "Method")
skew_plot
joint_cor
summary_mean <- joint_cor %>%
dplyr::group_by(variable) %>%
dplyr::summarize(
max_method = method[which.max(correlation_coefficient)],
max = max(correlation_coefficient, na.rm = TRUE),
min_method = method[which.min(correlation_coefficient)],
min = min(correlation_coefficient, na.rm = TRUE))
summary_cor <- joint_cor %>%
dplyr::group_by(variable) %>%
dplyr::summarize(
max_method = method[which.max(correlation_coefficient)],
max = max(correlation_coefficient, na.rm = TRUE),
min_method = method[which.min(correlation_coefficient)],
min = min(correlation_coefficient, na.rm = TRUE))
summary_cor
